---
description: 
globs: 
alwaysApply: true
---

## üéØ REGRAS INQUEBR√ÅVEIS - MODO S√äNIOR CIR√öRGICO

### REGRA 1: CONSULTA PR√âVIA OBRIGAT√ìRIA √Ä DOCUMENTA√á√ÉO
```

ANTES DE QUALQUER IMPLEMENTA√á√ÉO:
‚úÖ SEMPRE consultar TODOS os arquivos na pasta /docs/
‚úÖ SEMPRE seguir todas as regras definidas nos arquivos desta pasta
‚úÖ SEMPRE mapear requisitos contra documenta√ß√£o existente
‚úÖ SEMPRE validar compatibilidade com especifica√ß√µes

FORMATO DE RESPOSTA OBRIGAT√ìRIO:
üìÅ Documentos consultados: [lista completa]
üìã Regras identificadas: [lista numerada]
‚ö†Ô∏è Conflitos encontrados: [lista ou "NENHUM"]

```

### REGRA 1.1: AN√ÅLISE COMPLETA DO C√ìDIGO EXISTENTE
```

ANTES DE CRIAR QUALQUER ARQUIVO:
‚úÖ SEMPRE analisar TUDO que j√° foi implementado
‚úÖ SEMPRE verificar arquivos incompletos
‚úÖ SEMPRE identificar duplicidades
‚úÖ SEMPRE detectar conflitos potenciais
‚úÖ SEMPRE validar coer√™ncia da implementa√ß√£o

CHECKLIST OBRIGAT√ìRIO:

- [ ] Analisei todos os arquivos do projeto?
- [ ] Identifiquei padr√µes de nomenclatura existentes?
- [ ] Verifiquei estruturas de dados j√° definidas?
- [ ] Validei interfaces e tipos existentes?
- [ ] Confirmei aus√™ncia de duplica√ß√µes?

```

### REGRA 1.2: CONSIST√äNCIA TOTAL DE NOMENCLATURA
```

ANTES DE CRIAR QUALQUER C√ìDIGO:
‚úÖ SEMPRE verificar outros arquivos j√° criados
‚úÖ SEMPRE manter nomenclatura consistente
‚úÖ SEMPRE usar mesmos par√¢metros/assinaturas
‚úÖ SEMPRE seguir padr√µes estabelecidos
‚úÖ SEMPRE garantir que tudo "fale a mesma l√≠ngua"

VALIDA√á√ÉO OBRIGAT√ìRIA:

- Nomes de vari√°veis seguem padr√£o existente?
- Estruturas de fun√ß√£o s√£o consistentes?
- Tipos TypeScript est√£o alinhados?
- Imports/exports seguem conven√ß√£o?
- Coment√°rios seguem formato padr√£o?

```

### REGRA 2: DECIS√ïES CIR√öRGICAS
```

PROCESSO DE TOMADA DE DECIS√ÉO:

1. Analisar TODAS as op√ß√µes t√©cnicas dispon√≠veis
2. Avaliar impacto em c√≥digo existente
3. Considerar manutenibilidade futura
4. Validar performance e escalabilidade
5. Escolher solu√ß√£o mais robusta e limpa

CRIT√âRIOS DE QUALIDADE:
‚úÖ M√°xima redu√ß√£o de erros
‚úÖ M√≠nima quebra de c√≥digo
‚úÖ Zero retrabalho
‚úÖ M√°xima coer√™ncia arquitetural

```

### REGRA 3: VERIFICA√á√ÉO PR√âVIA TOTAL
```

PROTOCOLO ANTES DE ESCREVER C√ìDIGO:

1. An√°lise textual completa de arquivos relevantes
2. Mapeamento de depend√™ncias e relacionamentos
3. Valida√ß√£o de compatibilidade com c√≥digo existente
4. Teste mental de integra√ß√£o
5. Confirma√ß√£o de aus√™ncia de conflitos

ENTREGA OBRIGAT√ìRIA:

- C√≥digo 100% testado mentalmente
- C√≥digo 100% correto
- C√≥digo 100% integrado
- Zero suposi√ß√µes
- Zero dedu√ß√µes

```

### REGRA 4: PROIBI√á√ÉO TOTAL DE DEDU√á√ÉO
```

ABSOLUTAMENTE PROIBIDO:
‚ùå Assumir comportamentos n√£o documentados
‚ùå Deduzir estruturas de dados
‚ùå Supor configura√ß√µes
‚ùå Inferir relacionamentos
‚ùå Presumir funcionalidades

OBRIGAT√ìRIO:
‚úÖ Usar APENAS informa√ß√µes expl√≠citas
‚úÖ Basear-se APENAS em documenta√ß√£o
‚úÖ Referenciar APENAS c√≥digo existente
‚úÖ Validar APENAS contra especifica√ß√µes

```

### REGRA 5: PROBABILIDADE DE SUCESSO OBRIGAT√ìRIA
```

AO FINAL DE CADA IMPLEMENTA√á√ÉO:
‚úÖ SEMPRE calcular probabilidade de sucesso
‚úÖ SEMPRE ser assertivo (sem dedu√ß√µes)
‚úÖ SEMPRE justificar o percentual
‚úÖ SEMPRE listar fatores de risco

FORMATO OBRIGAT√ìRIO:
üéØ PROBABILIDADE DE SUCESSO: X%
üìä BASEADO EM:

- Documenta√ß√£o completa: +Y%
- C√≥digo existente analisado: +Z%
- Padr√µes seguidos: +W%
- Testes realizados: +V%
- Fatores de risco: -U%

RESULTADO FINAL: X% de certeza de funcionamento correto

```

## üìã FASES DE IMPLEMENTA√á√ÉO

### FASE 0: An√°lise e Arquitetura (Confian√ßa: 95%+)
```

OBJETIVO: Definir stack tecnol√≥gico e estrutura base
DOCUMENTOS: Consultar /docs/requirements.md, /docs/architecture.md

EXPLICA√á√ÉO PR√âVIA OBRIGAT√ìRIA:
"Vou analisar os requisitos e definir:

- Stack: Next.js 14 + TypeScript + Prisma + PostgreSQL
- Arquitetura: Modular com separa√ß√£o clara de responsabilidades
- UI: Tailwind CSS + Shadcn/ui para componentes modernos
- Estado: Zustand para gerenciamento global
- Confian√ßa: 98% baseada na complexidade do sistema"

ENTREG√ÅVEIS:

- package.json configurado
- Estrutura de pastas
- Configura√ß√µes base (ESLint, Prettier, TypeScript)
- Docker setup

```

### FASE 1: Core Domain Models (Confian√ßa: 90%+)
```

OBJETIVO: Implementar entidades principais do neg√≥cio

EXPLICA√á√ÉO PR√âVIA:
"Implementarei os modelos de dados baseados nas regras RB_2.*:

- Product (com varia√ß√µes e adicionais)
- Order (com estados e tipos)
- Customer (com fidelidade)
- Payment (com estrat√©gias diferentes)
Confian√ßa: 92% - modelos bem definidos no documento"

VALIDA√á√ïES OBRIGAT√ìRIAS:

- [ ] Consultar /docs/database-schema.md se existir
- [ ] Verificar relacionamentos entre entidades
- [ ] Implementar valida√ß√µes de neg√≥cio

```

### FASE 2: Sistema de Pedidos (Confian√ßa: 85%+)
```

OBJETIVO: Fluxo completo de pedidos (RB_5)

EXPLICA√á√ÉO PR√âVIA:
"Implementarei o fluxo de pedidos com:

1. Factory Pattern para tipos de pedido (Mesa/Delivery/Balc√£o)
2. State Machine para status
3. C√°lculo din√¢mico de taxas
4. Integra√ß√£o com sistema de pagamento
Confian√ßa: 87% - fluxo bem documentado, mas complexo"

ANTI-ALUCINA√á√ÉO:

- Sempre validar tipo de pedido antes de calcular taxas
- N√£o assumir campos opcionais como obrigat√≥rios
- Verificar se endere√ßo √© necess√°rio apenas para delivery

```

### FASE 3: Interface do Cliente (Confian√ßa: 80%+)
```

OBJETIVO: UI/UX moderna e responsiva (RB_3)

EXPLICA√á√ÉO PR√âVIA:
"Criarei interface com:

- Design system baseado em Atomic Design
- Componentes reutiliz√°veis com Shadcn/ui
- Tema customiz√°vel (claro/escuro)
- Responsivo mobile-first
Confian√ßa: 83% - depende de feedback visual"

COMPONENTES CR√çTICOS:

- ProductCard com varia√ß√µes
- ShoppingCart com c√°lculos em tempo real
- CheckoutFlow com valida√ß√µes
- OrderTracking com WebSockets

```

### FASE 4: Painel Administrativo (Confian√ßa: 75%+)
```

OBJETIVO: Dashboard completo para gest√£o (RB_4)

EXPLICA√á√ÉO PR√âVIA:
"Implementarei painel admin com:

- CRUD completo para todas entidades
- Relat√≥rios com gr√°ficos (Chart.js/Recharts)
- Sistema de permiss√µes granular
- √Årea de marketing e anota√ß√µes
Confian√ßa: 78% - muitas funcionalidades, precisa valida√ß√£o constante"

M√ìDULOS ESPECIAIS:

- M√≥dulo Gar√ßom (RB_7)
- M√≥dulo Entregador (RB_8)
- M√≥dulo Cozinha (RB_9)

```

### FASE 5: Integra√ß√µes e Otimiza√ß√µes (Confian√ßa: 70%+)
```

OBJETIVO: WhatsApp, PIX, performance

EXPLICA√á√ÉO PR√âVIA:
"Integrarei sistemas externos:

- API WhatsApp (Menuia ou similar)
- Gateway PIX com QR Code
- Cache com Redis
- Monitoramento com Sentry
Confian√ßa: 72% - depende de APIs externas"

```

## üìã TEMPLATE DE RESPOSTA OBRIGAT√ìRIA

```

üîç AN√ÅLISE PR√âVIA COMPLETA:
üìÅ Documentos consultados: [lista completa com caminhos]
üìã Regras aplicadas: [lista numerada das regras dos docs]
üîÑ C√≥digo existente analisado: [lista de arquivos verificados]
‚ö†Ô∏è Conflitos identificados: [lista detalhada ou "NENHUM"]
üéØ Padr√µes identificados: [nomenclatura, estruturas, conven√ß√µes]

üí° DECIS√ÉO CIR√öRGICA:
üéØ Abordagem escolhida: [descri√ß√£o t√©cnica]
‚úÖ Justificativa: [por que esta √© a melhor op√ß√£o]
üõ°Ô∏è Preven√ß√£o de erros: [medidas tomadas]
üîó Integra√ß√£o: [como se conecta com c√≥digo existente]

‚ö° IMPLEMENTA√á√ÉO:
[C√ìDIGO 100% TESTADO E CORRETO]

üìä PROBABILIDADE DE SUCESSO: X%
üìà C√ÅLCULO DETALHADO:

- Documenta√ß√£o seguida: +Y%
- C√≥digo existente respeitado: +Z%
- Padr√µes mantidos: +W%
- Valida√ß√µes realizadas: +V%
- Fatores de risco identificados: -U%
- RESULTADO FINAL: X% de certeza

```

## üõ°Ô∏è SISTEMA ANTI-ALUCINA√á√ÉO

### VALIDA√á√ïES OBRIGAT√ìRIAS ANTES DE CADA IMPLEMENTA√á√ÉO:
```

const validacoes = {
consultar_docs: () => {
// SEMPRE verificar /docs/ antes de implementar
return fs.readdirSync('./docs/').map(file => require(file));
},

verificar_conflitos: (novoModulo: string) => {
// Verificar se j√° existe implementa√ß√£o similar
return grep_codebase(novoModulo);
},

calcular_confianca: (complexidade: number, documentacao: number) => {
return Math.min(95, (documentacao * 0.7) + (complexidade * 0.3));
}
};

```

### CHECKLIST ANTI-ERRO:
- [ ] Consultei TODOS os arquivos em /docs/?
- [ ] Identifiquei conflitos com c√≥digo existente?
- [ ] Expliquei EXATAMENTE o que vou fazer?
- [ ] Calculei n√≠vel de confian√ßa baseado em evid√™ncias?
- [ ] Mapeei para regras de neg√≥cio espec√≠ficas (RB_X.X)?

## ‚öôÔ∏è CONFIGURA√á√ïES T√âCNICAS RECOMENDADAS

```

{
"stack": {
"frontend": "Next.js 14 + TypeScript + Tailwind CSS",
"backend": "Next.js API Routes + Prisma",
"database": "PostgreSQL",
"cache": "Redis",
"ui": "Shadcn/ui + Lucide Icons",
"state": "Zustand",
"forms": "React Hook Form + Zod",
"charts": "Recharts",
"payments": "Stripe/MercadoPago",
"whatsapp": "Menuia API ou similar"
},
"architecture": {
"pattern": "Feature-based modules",
"structure": "src/features/[feature]/[layer]",
"testing": "Jest + Testing Library",
"deployment": "Docker + Vercel/Railway"
}
}


```